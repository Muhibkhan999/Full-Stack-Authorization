{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\my-app\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../config/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({});\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Get initial session\n    const getSession = async () => {\n      var _session$user;\n      const {\n        data: {\n          session\n        }\n      } = await supabase.auth.getSession();\n      setUser((_session$user = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user !== void 0 ? _session$user : null);\n      setLoading(false);\n    };\n    getSession();\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      var _session$user2;\n      setUser((_session$user2 = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user2 !== void 0 ? _session$user2 : null);\n      setLoading(false);\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  const signUp = async (email, password, userData = {}) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: userData,\n          emailRedirectTo: `${window.location.origin}/dashboard`\n        }\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n  const signIn = async (email, password) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n  const signInWithGoogle = async () => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithOAuth({\n        provider: 'google',\n        options: {\n          redirectTo: `${window.location.origin}/dashboard`\n        }\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n  const signOut = async () => {\n    try {\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) throw error;\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n  const resetPassword = async email => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/reset-password`\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n  const verifyEmail = async (token, type) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.verifyOtp({\n        token_hash: token,\n        type: type\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n  const resendVerificationEmail = async email => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.resend({\n        type: 'signup',\n        email: email\n      });\n      if (error) throw error;\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n  const value = {\n    user,\n    loading,\n    signUp,\n    signIn,\n    signInWithGoogle,\n    signOut,\n    resetPassword,\n    verifyEmail,\n    resendVerificationEmail\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","supabase","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","getSession","_session$user","data","session","auth","subscription","onAuthStateChange","event","_session$user2","unsubscribe","signUp","email","password","userData","error","options","emailRedirectTo","window","location","origin","signIn","signInWithPassword","signInWithGoogle","signInWithOAuth","provider","redirectTo","signOut","console","resetPassword","resetPasswordForEmail","verifyEmail","token","type","verifyOtp","token_hash","resendVerificationEmail","resend","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/my-app/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react'\r\nimport { supabase } from '../config/supabase'\r\n\r\nconst AuthContext = createContext({})\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext)\r\n}\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null)\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    // Get initial session\r\n    const getSession = async () => {\r\n      const { data: { session } } = await supabase.auth.getSession()\r\n      setUser(session?.user ?? null)\r\n      setLoading(false)\r\n    }\r\n\r\n    getSession()\r\n\r\n    // Listen for auth changes\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\r\n      async (event, session) => {\r\n        setUser(session?.user ?? null)\r\n        setLoading(false)\r\n      }\r\n    )\r\n\r\n    return () => subscription.unsubscribe()\r\n  }, [])\r\n\r\n  const signUp = async (email, password, userData = {}) => {\r\n    try {\r\n      const { data, error } = await supabase.auth.signUp({\r\n        email,\r\n        password,\r\n        options: {\r\n          data: userData,\r\n          emailRedirectTo: `${window.location.origin}/dashboard`\r\n        }\r\n      })\r\n\r\n      if (error) throw error\r\n\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      return { data: null, error }\r\n    }\r\n  }\r\n\r\n  const signIn = async (email, password) => {\r\n    try {\r\n      const { data, error } = await supabase.auth.signInWithPassword({\r\n        email,\r\n        password\r\n      })\r\n\r\n      if (error) throw error\r\n\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      return { data: null, error }\r\n    }\r\n  }\r\n\r\n  const signInWithGoogle = async () => {\r\n    try {\r\n      const { data, error } = await supabase.auth.signInWithOAuth({\r\n        provider: 'google',\r\n        options: {\r\n          redirectTo: `${window.location.origin}/dashboard`\r\n        }\r\n      })\r\n\r\n      if (error) throw error\r\n\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      return { data: null, error }\r\n    }\r\n  }\r\n\r\n  const signOut = async () => {\r\n    try {\r\n      const { error } = await supabase.auth.signOut()\r\n      if (error) throw error\r\n    } catch (error) {\r\n      console.error('Error signing out:', error)\r\n    }\r\n  }\r\n\r\n  const resetPassword = async (email) => {\r\n    try {\r\n      const { data, error } = await supabase.auth.resetPasswordForEmail(email, {\r\n        redirectTo: `${window.location.origin}/reset-password`\r\n      })\r\n\r\n      if (error) throw error\r\n\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      return { data: null, error }\r\n    }\r\n  }\r\n\r\n  const verifyEmail = async (token, type) => {\r\n    try {\r\n      const { data, error } = await supabase.auth.verifyOtp({\r\n        token_hash: token,\r\n        type: type\r\n      })\r\n\r\n      if (error) throw error\r\n\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      return { data: null, error }\r\n    }\r\n  }\r\n\r\n  const resendVerificationEmail = async (email) => {\r\n    try {\r\n      const { data, error } = await supabase.auth.resend({\r\n        type: 'signup',\r\n        email: email\r\n      })\r\n\r\n      if (error) throw error\r\n\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      return { data: null, error }\r\n    }\r\n  }\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    signUp,\r\n    signIn,\r\n    signInWithGoogle,\r\n    signOut,\r\n    resetPassword,\r\n    verifyEmail,\r\n    resendVerificationEmail\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  )\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}